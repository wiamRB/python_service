events {}
# Define which servers to include in the load balancing scheme.
http {
    upstream app {
        server master;
        server python_service_master_1:3001;
        server python_service_master_2:3001;
     }
# This server accepts all traffic to port 80 and passes it to the upstream.
server {
         listen 80;
         server_name app.com;
         location / {
              proxy_pass http://app;
          }
     }
}
Load balancing with Nginx uses a round-robin algorithm by default if no other method is defined. With round-robin scheme each server is selected in turns according to the order we set them in the Nginx.conf file. This balances the number of requests equally between our to two master instances.

Step 3 â€” Dockerize everything
We will create the Dockerfiles for our services.

Dockerfile

FROM python:3.8-slim-buster
# Install dependencies:
COPY requirements.txt .
RUN pip install -r requirements.txt
EXPOSE 3001
COPY master_assistant.py .
# Run the application:
CMD python master_assistant.py
Dockerfile.news

FROM python:3.8-slim-buster
# Install dependencies:
COPY requirements.txt .
RUN pip install -r requirements.txt
EXPOSE 3003
COPY news.py .
# Run the application:
CMD python news.py
Dockerfile.weather

FROM python:3.8-slim-buster
# Install dependencies:
COPY requirements.txt .
RUN pip install -r requirements.txt
EXPOSE 3002
COPY weather.py .
# Run the application:
CMD python weather.py
Dockerfile.nginx

# using Nginx base image
FROM nginx
# delete nginx default .conf .file
RUN rm /etc/nginx/conf.d/default.conf
# add the .conf file we have created
COPY nginx.conf /etc/nginx/nginx.conf
Time for docker-compose magic:
Create a file named docker-compose.yml. Now we will add the configurations of Nginx and our services containers by adding the following code.

version: "3.9"
services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
        - 80:80
    depends_on:
        - master
  master:
    build:
      context: .
      dockerfile: Dockerfile
  weather:
    build:
      context: .
      dockerfile: Dockerfile.weather
  news:
    build:
      context: .
      dockerfile: Dockerfile.news
With the dockerfile command we specify the Dockerfile to build from, and with the ports we specify the nginxâ€™s port to be 80 so it we be accessible by the clients.

Docker-Compose API creates an internal network in which the containers can communicate with each other using the containerâ€™s name. For example, the Nginx container can interact with the master container by using the following hostname: http://python_service_master:3001/ (The given name for each container by docker-compose is in this format: <project directory name>_<service name>). thatâ€™s why in the above steps when we have configured our Nginx server we could set our app endpoint to http://python_service_master<instance number>:3001.

Step 4 â€” Deploy and scale
We will deploy and scale our app with docker-compose with the following command:

docker-compose up --build --scale master=2
Docker-compose creates a container with our Nginx server, a container for each of the news and weather services and two instances of our main Api master(server).

We can check if everything is running with:

docker ps --format '{{.Names}}'
We must see the following containers running:

nginx
python_service_master_2
python_service_master_1
python_service_news_1
python_service_weather_1
Now time to check how the load balance works. Open two separate terminals and run:

First:

docker logs python_service_master_1 -f
Second:

docker logs python_service_master_2 -f
Now open Postman or your browser and navigate to http://localhost/news?country=gr or http://localhost/weather?city=amsterdam for example.

We will use the free external apis for weather and news api.openweathermap.org & newsapi.org

If you look at the logs of the first terminal you will see that request was redirected to it.

Refresh or make the request again and you will see that the request will be redirected to the second terminal.. And on and on..

And thatâ€™s it!

Code on github where you can find the README file with further help on running and installing docker:

GitHub - manos-fr/News_Weather_Services_Python_Docker: The architecture of python microservicesâ€¦
The architecture of python microservices using Docker. Client -> Nginx -> mainApi -> microservices.. The respectiveâ€¦
github.com

Enjoy ðŸš€ðŸš€ðŸš€

